/* Core */
import { createSlice, type PayloadAction } from '@reduxjs/toolkit';

/* Instruments */
import { initailizeAsync } from './thunks';

const initialState: coreSliceState = {
  status: 'initial',
};

export const coreSlice = createSlice({
  name: 'core',
  initialState,
  reducers: {
    setStatus: (state, action: PayloadAction<StatusType>) => {
      state.status = action.payload;
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(initailizeAsync.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(initailizeAsync.fulfilled, (state, action) => {
        state.status = action.payload;
      });
  },
});

/* Types */
export type coreSliceState = {
  status: StatusType;
};

type StatusType = 'initial' | 'loading' | 'fulfilled' | 'failed';
